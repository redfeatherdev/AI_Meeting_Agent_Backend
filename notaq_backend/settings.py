"""
Django settings for notaq_backend project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from envyaml import EnvYAML
from celery.schedules import crontab
from datetime import timedelta
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENV_PATH = str(BASE_DIR) + "/confidentials/defaults.yaml"

local = os.environ.get("FREIGHT_ENV", "local") == "local"  # if we are local, use yaml,
env = os.environ  # if not use environment variables, local is default
if local:
    env = EnvYAML(ENV_PATH)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vkc$f=nt)c-xj04tvna#7e7b23f2iseg)sp7o0ksxojyq+ussl'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://192.168.130.159:5173",
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    'Authorization',
    'Refresh',
]

ALLOWED_HOSTS = ['*']
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'
os.environ['OAUTHLIB_RELAX_TOKEN_SCOPE'] = '1'
# Application definition

AUTHENTICATION_BACKENDS = [
    'authentication.utils.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_yasg',
    'calendar_api_service',
    'authentication'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
}

ROOT_URLCONF = 'notaq_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'notaq_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID") if os.getenv("GOOGLE_CLIENT_ID") else env["GOOGLE_CLIENT_ID"]
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET") if os.getenv("GOOGLE_CLIENT_SECRET") else env["GOOGLE_CLIENT_SECRET"]
GOOGLE_REDIRECT_URL_FOR_AUTH = os.getenv("GOOGLE_REDIRECT_URL_FOR_AUTH") if os.getenv("GOOGLE_REDIRECT_URL_FOR_AUTH") else env["GOOGLE_REDIRECT_URL_FOR_AUTH"]
GOOGLE_REDIRECT_URL_FOR_CALENDAR_API = os.getenv("GOOGLE_REDIRECT_URL_FOR_CALENDAR_API") if os.getenv("GOOGLE_REDIRECT_URL_FOR_CALENDAR_API") else env["GOOGLE_REDIRECT_URL_FOR_CALENDAR_API"]
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY") if os.getenv("GOOGLE_API_KEY") else env["GOOGLE_API_KEY"]

TRANSKRIPTOR_API_KEY = os.getenv("TRANSKRIPTOR_API_KEY") if os.getenv("TRANSKRIPTOR_API_KEY") else env["TRANSKRIPTOR_API_KEY"]
TRANSKRIPTOR_JOIN_MEETING_URL = os.getenv("TRANSKRIPTOR_JOIN_MEETING_URL") if os.getenv("TRANSKRIPTOR_JOIN_MEETING_URL") else env["TRANSKRIPTOR_JOIN_MEETING_URL"]
TRANSKRIPTOR_GET_HISTORY_URL = os.getenv("TRANSKRIPTOR_GET_HISTORY_URL") if os.getenv("TRANSKRIPTOR_GET_HISTORY_URL") else env["TRANSKRIPTOR_GET_HISTORY_URL"]
TRANSKRIPTOR_GET_CONTENT_URL = os.getenv("TRANSKRIPTOR_GET_CONTENT_URL") if os.getenv("TRANSKRIPTOR_GET_CONTENT_URL") else env["TRANSKRIPTOR_GET_CONTENT_URL"]

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") if os.getenv("OPENAI_API_KEY") else env["OPENAI_API_KEY"]

CLIENT_CONFIG = {
    "web": {
        "client_id": GOOGLE_CLIENT_ID,
        "project_id": "notaqai",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_secret": GOOGLE_CLIENT_SECRET,
        "javascript_origins": [
            "http://localhost:8000"
        ]
    }
}

REACT_APP_FRONTEND_URL = os.getenv("REACT_APP_FRONTEND_URL") if os.getenv("REACT_APP_FRONTEND_URL") else env["REACT_APP_FRONTEND_URL"]


# Redis as the broker
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

# Celery configuration
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
